Arrays/objects

Object.keys() -> generates an array of strings which contains all the keys stored in an object. no specific order to the entries in the array.

for in -> for (let user in users) {} -> iterate through all the keys within an obj NOTE: Objects do not maintain an ordering to stored keys like arrays do; thus a key's position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key. dont use for arrays, it is meant to iterate through an objects properties. Use for loop, forEach or for of for arrays.

.hasOwnProperty() -> checks if an obj has a specific property. returns true or false

in -> 'Alan' in users; -> checks if an obj has a specific property. returns true or false

.indexOf('orange') -> takes an element as a param, returns the position/index of said element or -1 if the element does not exist in the array

...-> [...thisArray]; -> ... spread operator, allows us to copy all of an array's elements, in order. Copied array is unchanged.

.slice(1, 2) -> copies or extracts a given number of elements to a new array, leaving the array it is called upon untouched. 2 params, first at which to begin extraction, second where to stop extraction. Extraction occurs up to but not including the second param. if params are not included, the default is to start at the beginning of the array and through the end. An easy way to make a copy of the entire array.

.splice(1, 2, 3, 4) -> removes any number of consecutive elements from anywhere in an array. takes up to 3 params, first param represents the index on the array from which to begin removing elements, second param indicates the number of elements to delete, .Also returns a new array containing the removed elements. The 3rd param onwards are elements added to the array from the first removed element.

.shift() -> opposite of shift, removes an element from the beginning of an array, no params, one element at a time.

.pop() -> opposite of push, removes an element from the end of an array, no params, one element at a time.

.unshift('x3', 'x4') -> adds elements to the beginning, ['x3', 'x4', 'x1', 'x2']

.push('x3') -> adds elements to the end of an array, ['x1', 'x2', 'x3']
