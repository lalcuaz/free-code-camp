es6 Notes

Javascript promise
- a promise to do something, usually asynchronously. when the task completes you either fulfill your promise or fail to do so. Promise is a constructor function, need the new keyword to create. takes a func as an arg with two parameters (resolve, reject). promises are most useful when you have a process that takes an unknown amount of time in your code (i.e something asynchronous), often a server request. It takes time and after it completes you usually want to do something with the response from the server.

const myPromise = new Promise((resolve, reject) => {

});

- a promise has 3 states: pending, fulfilled, rejected. resolve is used when you want your promise to succeed, and reject when you want it to fail. used strings as the args but can be anything often objects.

const myPromise = new Promise((resolve, reject) => {
  if(condition here) {
    resolve("Promise was fulfilled");
  } else {
    reject("Promise was rejected");
  }
});

Handle a fulfilled promise with then
-the then method is executed immediately after your promise fulfilled with resolve. result comes from the arg given to the resolve method.

myPromise.then(result => {
  
});

Handle a rejected promise with catch
- the catch method is used when your promise has been rejected. executed immediately after a promise's reject method. error is the arg passed in the reject method.

Module script
-ES6 introduced a way to easily share code among js files. Exporting parts of a file and importing the parts you need -> a script needs to be created in the HTML doc. This script allows usage of the export and import features.

<script type="module" src="index.js"></script> -> module script

export
- if you want to use a function in a file, in several different js files. we need to export it

the common way:
export const add = (x, y) => {
  return x + y;
}

another way:
const add = (x, y) => {
  return x + y;
}

export { add };

-when a variable or func is exported, you can import it in another file and reuse it without having to rewrite the code. export multiple things by repeating the first example for each thing you want to export or placing them all in an export statement like in the second example.
export { add, subtract };

Export default
- use if only one value is being exported from a file. It is also used to create a fallback value for a file or module. since export default is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. you also cannot use var, let or const

export default function add(x, y) {
  return x + y;
}

export default function(x, y) {
  return x + y;
}
- one is a named func the other is an anonymous func.

import
- allows you to choose which parts of a file or module to load. after exporting, it needs to be imported

import { add, subtract } from './math_functions.js';

- will import add from the file stated and ignore the rest. The ./ tells the import to look for the specific file in the same folder as the current file.

use * to import everything
- import * imports all the contents of a file. the below example creates an obj called myMathModule which will contain all the exports from math)functions.js 

import * as myMathModule from "./math_functions.js";

-to use the functions:

myMathModule.add(2,3);
myMathModule.subtract(5,3);

import a default export 
- a different import syntax is used but is similar. add is a variable name for whatever the default export of the file is. you can use any name.

import add from "./math_functions.js";

getter/setter
- obtain and set the value of a property within an object. allows a user to do these functions without giving them direct access to the private variable
get temperature() {
  return this._temperature = 5/9 * (this._temperature - 32);
}

set temperature(temp) {
  this._temperature = temp * 9.0 / 5 + 32;
}

const thermos = new Thermostat(76); // Setting in Fahrenheit scale
let temp = thermos.temperature; // 24.44 in Celsius
thermos.temperature = 26;
temp = thermos.temperature; // 26 in Celsius

class syntax
new syntax to create objects, using the class keyword.
a class declaration has a constructor method that is invoked with the new keyword. if the constructor is not explicitly defined, then it is implicitly defined with no arguments.
the class keyword declares a new function to which a constructor is added.
class Vegetable {
  constructor(name) {
    this.name = name;
  }
}

defining functions within objects.
const person = {
  name: "Taylor",
  sayHello() {
    return `Hello! My name is ${this.name}.`;
  }
};
can remove the sayHello: function() {}

object literals.
const getMousePosition = (x, y) => ({
  x: x,
  y: y
});
->
const getMousePosition = (x, y) => ({ x, y });
removes redundancy of x: x
or
const createPerson = (name, age, gender) => {
  return { 
    name, 
    age, 
    gender
  };
};

${person.name} -> template literals.
const person = {
  name: "Zodiac Hasbro",
  age: 56
};

const greeting = `Hello, my name is #{person.name}!
I am ${person.age} years old.`;

first, backticks are used ` not quotes '/" 
second, the string is multi-line in the code and in the output, no \n needed
third, no concatenation operator, using ${} instead. can include ${a + b} operations as well. 

const result = {
  success: ["max-length", "no-amd", "prefer-arrow-functions"],
  failure: ["no-var", "var-on-top", "linebreak"],
  skipped: ["no-extra-semi", "no-dup-keys"]
};

function makeList(arr) {
  const failureItems = [];
  for (let element in arr) {
    failureItems.push(`<li class="text-warning">${arr[element]}</li>`);
  }

  return failureItems;
}
const failuresList = makeList(result.failure);

const { name, age } = user; -> destructuring assignment. instead of 
const name = user.name;
const age = user.age;
we can use
const { name, age } = user;
we can also give new variable names by using a colon instead.
const { name: userName, age: userAge} = user; 
the values are assigned to variables called userName and userAge instead.

can also use destructuring on nested objects
const user = {
  johnDoe: {
    age: 34,
    email: 'johnDoe@blah.com'
  }
};
const { johnDoe: { age, email }} = user;
or
const { johnDoe: { age: userAge, email: userEmail }} = user;

can also destructure arrays. the spread operator unpacks all contents of an array into a comma-separated list. but you cannot pick or choose which elements you want to assign to variables unlike destructuring.

const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
,,, skips indexes, logging a b c returns 1 2 5
let a = 8, b = 6;
[b, a] = [a, b];
switches the values around. b === 8 and a === 6 

can use with the rest parameter
const [a, b, ...arr] = [1, 2, 3, 4, 5, 6];
logging returns 1 2 [3,4,5,6]
similar to Array.prototype.slice();
const [,, ...shorterList] = list;
returns the same array with first two elements removed

can use to pass an object as a function's parameters
const profileUpdate = (profileData) => {
  const { name, age, nationality, location } = profileData;
}
instead ->
const profileUpdate = ({ name, age, nationality, location }) => {
}

another one -> 
const stats = {
  max: 56.78,
  standard_deviation: 4.34,
  median: 34.54,
  mode: 23.87,
  min: -0.75,
  average: 35.85
};
const half = ({max, min}) => (max + min) / 2.0;  

function howMany(...args) -> rest parameter, creates functions that take a variable number of arguments. Arguments are stored in an array that can be accessed inside the function. ... eliminates the need to check the args array and allows us to apply map(), filter(), and reduce() on the parameters array.
it returns an unpacked array, it spreads the array.
arr2 = [...arr1] copies the array completely


= (name = "Anonymous") => "Hello " + name;
->
default parameters, if the function is called without providing an argument.

const myFunc = () => {} 
if there is no function body and only a return value
const myFunc = () => "value";
-> We can create arrow functions when we dont need to name these functions because we do not reuse them anywhere else. Especially when passing a function as an argument to another function
if there is only one argument, parenthesis can be omitted
const doubler = item => item * 2;
otherwise
const multiplier = (item, multi) => item * multi;
multiplier(4, 2);

Object.freeze() -> prevents data mutation