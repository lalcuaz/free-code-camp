regex-notes

.replace() -> text.replace(regex, 'string') -> method replaces the text matched. the function takes the regex and the string to replace or a func to do something. "The sky is silver."; /silver/; "blue'; would change to "The sky is blue.";
can also access capture groups with $
"Code Camp".replace(/(\w+)\s(\w+)/, '$2 $1');

/(\w+) \1 \1/ -> capture group, enclose the regex pattern to be captured in parentheses. In this case, capture a word consisting of alphanumeric characters. The substring matched will be saved to a temporary 'variable' which can be accessed using a backslash and the number of the capture group eg. \1. 1 denotes the position from left to right starting at 1. 

() -> /P(engu|umpk)in/g -> check for groups of characters using a regular expression.

(?=) -> /q(?=u)/ -> positive lookahead, will look to make sure the element in the search pattern is there, but wont actually match it. would return q for qu

(?!) -> /q(?!u)/ -> negative lookahead, samething but will make sure the element is not there. would return q for qt

? -> /colou?r/ -> specify the possible existence of an element. This checks for zero or one of the preceding element. In this case, color has two different spellings, the u is optional

{} -> /a{3,5}h/ -> quantify specifiers, put two numbers within brackets, for lower and upper number of patters. In example, match only the letter a appearing betweem 3 and 5 times in the string.
{} -> /a{3}h/ -> to specify a specific number

\s -> matches whitespace and also carriage return, tab, form feed and new line characters. equal to [\r\t\f\n\v], also has \S

\d -> /\d/ -> shorthand character class for [0-9] has opposite notation \D as well

\W -> /\W/ -> the opposite of \w , [^A-Za-z0-9_]

\w -> /\w/ -> shorthand character class for [A-Za-z0-9_] 

$ -> /story$/ -> search for patterns at the end of strings

^ -> /^Ricky/ -> outside of a character set, it is used to search for patterns at the beginning of strings

? -> /t[a-z]*?i/ -> lazy matching, finds the smallest possible part of the string that satisfies the regex pattern

* -> /go*/ -> matches characters that occur zero or more times

+ -> /a+/ -> matches characters or a group of them that appear one or more times in a row that appear consecutively

[^] -> /[^aeiou]/ -> negated character set, a set of characters that we do not want to match

[-] -> [a-e7-9] -> define a range of characters

[] -> /b[aiu]g/ -> character classes, match anything within the brackets only

. -> /hu./ -> wildcard character, will match any one character, hu. -> ['hut', 'hug', 'hum']

g -> /Repeat/g -> a flag, g flag extracts a pattern more than once

.match() -> extracts the matches into an array. ["hello", "world"] the regex is used as a parameter

i -> /ignorecase/i -> a flag, i flag ignores cases

| -> /yes|no/ -> OR operator, match yes or no will return true or false

.test() -> takes the regex and applies it to a string and returns true or false. the string is used as the parameter


                